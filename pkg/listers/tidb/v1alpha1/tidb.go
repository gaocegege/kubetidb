/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/gaocegege/kubetidb/pkg/apis/tidb/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TiDBLister helps list TiDBs.
type TiDBLister interface {
	// List lists all TiDBs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TiDB, err error)
	// TiDBs returns an object that can list and get TiDBs.
	TiDBs(namespace string) TiDBNamespaceLister
	TiDBListerExpansion
}

// tiDBLister implements the TiDBLister interface.
type tiDBLister struct {
	indexer cache.Indexer
}

// NewTiDBLister returns a new TiDBLister.
func NewTiDBLister(indexer cache.Indexer) TiDBLister {
	return &tiDBLister{indexer: indexer}
}

// List lists all TiDBs in the indexer.
func (s *tiDBLister) List(selector labels.Selector) (ret []*v1alpha1.TiDB, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TiDB))
	})
	return ret, err
}

// TiDBs returns an object that can list and get TiDBs.
func (s *tiDBLister) TiDBs(namespace string) TiDBNamespaceLister {
	return tiDBNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TiDBNamespaceLister helps list and get TiDBs.
type TiDBNamespaceLister interface {
	// List lists all TiDBs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TiDB, err error)
	// Get retrieves the TiDB from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TiDB, error)
	TiDBNamespaceListerExpansion
}

// tiDBNamespaceLister implements the TiDBNamespaceLister
// interface.
type tiDBNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TiDBs in the indexer for a given namespace.
func (s tiDBNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TiDB, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TiDB))
	})
	return ret, err
}

// Get retrieves the TiDB from the indexer for a given namespace and name.
func (s tiDBNamespaceLister) Get(name string) (*v1alpha1.TiDB, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tidb"), name)
	}
	return obj.(*v1alpha1.TiDB), nil
}
