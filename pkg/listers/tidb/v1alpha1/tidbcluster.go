/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/gaocegege/kubetidb/pkg/apis/tidb/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TiDBClusterLister helps list TiDBClusters.
type TiDBClusterLister interface {
	// List lists all TiDBClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TiDBCluster, err error)
	// TiDBClusters returns an object that can list and get TiDBClusters.
	TiDBClusters(namespace string) TiDBClusterNamespaceLister
	TiDBClusterListerExpansion
}

// tiDBClusterLister implements the TiDBClusterLister interface.
type tiDBClusterLister struct {
	indexer cache.Indexer
}

// NewTiDBClusterLister returns a new TiDBClusterLister.
func NewTiDBClusterLister(indexer cache.Indexer) TiDBClusterLister {
	return &tiDBClusterLister{indexer: indexer}
}

// List lists all TiDBClusters in the indexer.
func (s *tiDBClusterLister) List(selector labels.Selector) (ret []*v1alpha1.TiDBCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TiDBCluster))
	})
	return ret, err
}

// TiDBClusters returns an object that can list and get TiDBClusters.
func (s *tiDBClusterLister) TiDBClusters(namespace string) TiDBClusterNamespaceLister {
	return tiDBClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TiDBClusterNamespaceLister helps list and get TiDBClusters.
type TiDBClusterNamespaceLister interface {
	// List lists all TiDBClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TiDBCluster, err error)
	// Get retrieves the TiDBCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TiDBCluster, error)
	TiDBClusterNamespaceListerExpansion
}

// tiDBClusterNamespaceLister implements the TiDBClusterNamespaceLister
// interface.
type tiDBClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TiDBClusters in the indexer for a given namespace.
func (s tiDBClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TiDBCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TiDBCluster))
	})
	return ret, err
}

// Get retrieves the TiDBCluster from the indexer for a given namespace and name.
func (s tiDBClusterNamespaceLister) Get(name string) (*v1alpha1.TiDBCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tidbcluster"), name)
	}
	return obj.(*v1alpha1.TiDBCluster), nil
}
