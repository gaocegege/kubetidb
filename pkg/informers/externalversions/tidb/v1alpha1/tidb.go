/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by informer-gen

package v1alpha1

import (
	time "time"

	tidb_v1alpha1 "github.com/gaocegege/kubetidb/pkg/apis/tidb/v1alpha1"
	versioned "github.com/gaocegege/kubetidb/pkg/clientset/versioned"
	internalinterfaces "github.com/gaocegege/kubetidb/pkg/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/gaocegege/kubetidb/pkg/listers/tidb/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// TiDBInformer provides access to a shared informer and lister for
// TiDBs.
type TiDBInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.TiDBLister
}

type tiDBInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewTiDBInformer constructs a new informer for TiDB type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewTiDBInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredTiDBInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredTiDBInformer constructs a new informer for TiDB type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredTiDBInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubetidbV1alpha1().TiDBs(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubetidbV1alpha1().TiDBs(namespace).Watch(options)
			},
		},
		&tidb_v1alpha1.TiDB{},
		resyncPeriod,
		indexers,
	)
}

func (f *tiDBInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredTiDBInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *tiDBInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&tidb_v1alpha1.TiDB{}, f.defaultInformer)
}

func (f *tiDBInformer) Lister() v1alpha1.TiDBLister {
	return v1alpha1.NewTiDBLister(f.Informer().GetIndexer())
}
